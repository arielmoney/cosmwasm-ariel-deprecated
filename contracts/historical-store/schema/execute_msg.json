{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "new_admin"
          ],
          "properties": {
            "new_admin": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_clearing_house"
      ],
      "properties": {
        "update_clearing_house": {
          "type": "object",
          "required": [
            "new_house"
          ],
          "properties": {
            "new_house": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "record_curve"
      ],
      "properties": {
        "record_curve": {
          "type": "object",
          "required": [
            "c"
          ],
          "properties": {
            "c": {
              "$ref": "#/definitions/CurveRecord"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "record_deposit"
      ],
      "properties": {
        "record_deposit": {
          "type": "object",
          "required": [
            "d"
          ],
          "properties": {
            "d": {
              "$ref": "#/definitions/DepositRecord"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "record_funding_payment"
      ],
      "properties": {
        "record_funding_payment": {
          "type": "object",
          "required": [
            "f"
          ],
          "properties": {
            "f": {
              "$ref": "#/definitions/FundingPaymentRecord"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "record_funding_payments_multiple"
      ],
      "properties": {
        "record_funding_payments_multiple": {
          "type": "object",
          "required": [
            "vecf"
          ],
          "properties": {
            "vecf": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FundingPaymentRecord"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "record_funding_rate"
      ],
      "properties": {
        "record_funding_rate": {
          "type": "object",
          "required": [
            "f"
          ],
          "properties": {
            "f": {
              "$ref": "#/definitions/FundingRateRecord"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "record_liquidation"
      ],
      "properties": {
        "record_liquidation": {
          "type": "object",
          "required": [
            "l"
          ],
          "properties": {
            "l": {
              "$ref": "#/definitions/LiquidationRecord"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "record_trade"
      ],
      "properties": {
        "record_trade": {
          "type": "object",
          "required": [
            "t"
          ],
          "properties": {
            "t": {
              "$ref": "#/definitions/TradeRecord"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "CurveRecord": {
      "type": "object",
      "required": [
        "adjustment_cost",
        "base_asset_amount",
        "base_asset_amount_long",
        "base_asset_amount_short",
        "base_asset_reserve_after",
        "base_asset_reserve_before",
        "market_index",
        "open_interest",
        "oracle_price",
        "peg_multiplier_after",
        "peg_multiplier_before",
        "quote_asset_reserve_after",
        "quote_asset_reserve_before",
        "sqrt_k_after",
        "sqrt_k_before",
        "total_fee",
        "total_fee_minus_distributions",
        "ts"
      ],
      "properties": {
        "adjustment_cost": {
          "$ref": "#/definitions/Number128"
        },
        "base_asset_amount": {
          "$ref": "#/definitions/Number128"
        },
        "base_asset_amount_long": {
          "$ref": "#/definitions/Uint128"
        },
        "base_asset_amount_short": {
          "$ref": "#/definitions/Uint128"
        },
        "base_asset_reserve_after": {
          "$ref": "#/definitions/Uint128"
        },
        "base_asset_reserve_before": {
          "$ref": "#/definitions/Uint128"
        },
        "market_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "open_interest": {
          "$ref": "#/definitions/Uint128"
        },
        "oracle_price": {
          "$ref": "#/definitions/Number128"
        },
        "peg_multiplier_after": {
          "$ref": "#/definitions/Uint128"
        },
        "peg_multiplier_before": {
          "$ref": "#/definitions/Uint128"
        },
        "quote_asset_reserve_after": {
          "$ref": "#/definitions/Uint128"
        },
        "quote_asset_reserve_before": {
          "$ref": "#/definitions/Uint128"
        },
        "sqrt_k_after": {
          "$ref": "#/definitions/Uint128"
        },
        "sqrt_k_before": {
          "$ref": "#/definitions/Uint128"
        },
        "total_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "total_fee_minus_distributions": {
          "$ref": "#/definitions/Uint128"
        },
        "ts": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "DepositDirection": {
      "type": "string",
      "enum": [
        "DEPOSIT",
        "WITHDRAW"
      ]
    },
    "DepositRecord": {
      "type": "object",
      "required": [
        "amount",
        "collateral_before",
        "cumulative_deposits_before",
        "direction",
        "ts",
        "user"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "collateral_before": {
          "$ref": "#/definitions/Uint128"
        },
        "cumulative_deposits_before": {
          "$ref": "#/definitions/Uint128"
        },
        "direction": {
          "$ref": "#/definitions/DepositDirection"
        },
        "ts": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "user": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "FundingPaymentRecord": {
      "type": "object",
      "required": [
        "amm_cumulative_funding_long",
        "amm_cumulative_funding_short",
        "base_asset_amount",
        "funding_payment",
        "market_index",
        "ts",
        "user",
        "user_last_cumulative_funding",
        "user_last_funding_rate_ts"
      ],
      "properties": {
        "amm_cumulative_funding_long": {
          "$ref": "#/definitions/Number128"
        },
        "amm_cumulative_funding_short": {
          "$ref": "#/definitions/Number128"
        },
        "base_asset_amount": {
          "$ref": "#/definitions/Number128"
        },
        "funding_payment": {
          "$ref": "#/definitions/Number128"
        },
        "market_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ts": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "user": {
          "$ref": "#/definitions/Addr"
        },
        "user_last_cumulative_funding": {
          "$ref": "#/definitions/Number128"
        },
        "user_last_funding_rate_ts": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "FundingRateRecord": {
      "type": "object",
      "required": [
        "cumulative_funding_rate_long",
        "cumulative_funding_rate_short",
        "funding_rate",
        "mark_price_twap",
        "market_index",
        "oracle_price_twap",
        "ts"
      ],
      "properties": {
        "cumulative_funding_rate_long": {
          "$ref": "#/definitions/Number128"
        },
        "cumulative_funding_rate_short": {
          "$ref": "#/definitions/Number128"
        },
        "funding_rate": {
          "$ref": "#/definitions/Number128"
        },
        "mark_price_twap": {
          "$ref": "#/definitions/Uint128"
        },
        "market_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "oracle_price_twap": {
          "$ref": "#/definitions/Number128"
        },
        "ts": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "LiquidationRecord": {
      "type": "object",
      "required": [
        "base_asset_value",
        "base_asset_value_closed",
        "collateral",
        "fee_to_insurance_fund",
        "fee_to_liquidator",
        "liquidation_fee",
        "liquidator",
        "margin_ratio",
        "partial",
        "total_collateral",
        "ts",
        "unrealized_pnl",
        "user"
      ],
      "properties": {
        "base_asset_value": {
          "$ref": "#/definitions/Uint128"
        },
        "base_asset_value_closed": {
          "$ref": "#/definitions/Uint128"
        },
        "collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "fee_to_insurance_fund": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "fee_to_liquidator": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "liquidation_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "liquidator": {
          "$ref": "#/definitions/Addr"
        },
        "margin_ratio": {
          "$ref": "#/definitions/Uint128"
        },
        "partial": {
          "type": "boolean"
        },
        "total_collateral": {
          "$ref": "#/definitions/Uint128"
        },
        "ts": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "unrealized_pnl": {
          "$ref": "#/definitions/Number128"
        },
        "user": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "Number128": {
      "type": "object",
      "required": [
        "amount",
        "is_positive"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "is_positive": {
          "type": "boolean"
        }
      }
    },
    "PositionDirection": {
      "type": "string",
      "enum": [
        "Long",
        "Short"
      ]
    },
    "TradeRecord": {
      "type": "object",
      "required": [
        "base_asset_amount",
        "direction",
        "fee",
        "liquidation",
        "mark_price_after",
        "mark_price_before",
        "market_index",
        "oracle_price",
        "quote_asset_amount",
        "referee_discount",
        "referrer_reward",
        "token_discount",
        "ts",
        "user"
      ],
      "properties": {
        "base_asset_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "direction": {
          "$ref": "#/definitions/PositionDirection"
        },
        "fee": {
          "$ref": "#/definitions/Uint128"
        },
        "liquidation": {
          "type": "boolean"
        },
        "mark_price_after": {
          "$ref": "#/definitions/Uint128"
        },
        "mark_price_before": {
          "$ref": "#/definitions/Uint128"
        },
        "market_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "oracle_price": {
          "$ref": "#/definitions/Number128"
        },
        "quote_asset_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "referee_discount": {
          "$ref": "#/definitions/Uint128"
        },
        "referrer_reward": {
          "$ref": "#/definitions/Uint128"
        },
        "token_discount": {
          "$ref": "#/definitions/Uint128"
        },
        "ts": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "user": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
