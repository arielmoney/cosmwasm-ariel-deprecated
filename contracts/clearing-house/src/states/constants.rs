use cosmwasm_std::Uint128;

// PRECISIONS
pub const AMM_RESERVE_PRECISION: Uint128 = Uint128::new(10_000_000_000_000); //expo = -13;
pub const MARK_PRICE_PRECISION: Uint128 =  Uint128::new(10_000_000_000); //expo = -10
pub const QUOTE_PRECISION: Uint128 =  Uint128::new(1_000_000); // expo = -6
pub const FUNDING_PAYMENT_PRECISION: Uint128 = Uint128::new(10_000); // expo = -4
pub const MARGIN_PRECISION: Uint128 = Uint128::new(10_000); // expo = -4
pub const PEG_PRECISION: Uint128 = Uint128::new(1_000); //expo = -3
pub const PRICE_SPREAD_PRECISION: i128 = 10_000; // expo = -4
pub const PRICE_SPREAD_PRECISION_U128: Uint128 = Uint128::new(10_000); // expo = -4

// PRECISION CONVERSIONS
pub const PRICE_TO_PEG_PRECISION_RATIO: Uint128 = Uint128::new(10_000_000); // MARK_PRICE_PRECISION / PEG_PRECISION; // expo: 7
pub const PRICE_TO_PEG_QUOTE_PRECISION_RATIO: Uint128 = Uint128::new(10_000); // MARK_PRICE_PRECISION / QUOTE_PRECISION; // expo: 4
pub const AMM_TO_QUOTE_PRECISION_RATIO: Uint128 = Uint128::new(10_000_000); // AMM_RESERVE_PRECISION / QUOTE_PRECISION; // expo: 7
pub const AMM_TO_QUOTE_PRECISION_RATIO_I128: Uint128 = Uint128::new(10_000_000); // AMM_RESERVE_PRECISION / QUOTE_PRECISION ; // expo: 7
pub const AMM_TIMES_PEG_TO_QUOTE_PRECISION_RATIO: Uint128 = Uint128::new(10_000_000_000);    // AMM_RESERVE_PRECISION * PEG_PRECISION / QUOTE_PRECISION; // expo: 10
pub const QUOTE_TO_BASE_AMT_FUNDING_PRECISION: Uint128 = Uint128::new(1_000_000_000_000_000_000_000); // AMM_RESERVE_PRECISION * MARK_PRICE_PRECISION * FUNDING_PAYMENT_PRECISION / QUOTE_PRECISION; // expo: 21

pub const PRICE_TO_QUOTE_PRECISION_RATIO: Uint128 = Uint128::new(10_000); // MARK_PRICE_PRECISION / QUOTE_PRECISION; // expo: 4
pub const MARK_PRICE_TIMES_AMM_TO_QUOTE_PRECISION_RATIO: Uint128 =
    Uint128::new(MARK_PRICE_PRECISION.u128() * AMM_TO_QUOTE_PRECISION_RATIO.u128()); // expo 17

// FEE REBATES
pub const UPDATE_K_ALLOWED_PRICE_CHANGE: Uint128 = Uint128::new(1_000_000_000); // MARK_PRICE_PRECISION / Uint128::new(10));

// TIME PERIODS
pub const ONE_HOUR: Uint128 =  Uint128::new(3600);

// FEES
pub const SHARE_OF_FEES_ALLOCATED_TO_CLEARING_HOUSE_NUMERATOR: Uint128 = Uint128::new(5);
pub const SHARE_OF_FEES_ALLOCATED_TO_CLEARING_HOUSE_DENOMINATOR: Uint128 = Uint128::new(100);

pub const DEFAULT_FEE_NUMERATOR: Uint128 = Uint128::new(1);
pub const DEFAULT_FEE_DENOMINATOR: Uint128 = Uint128::new(1000);

pub const DEFAULT_DISCOUNT_TOKEN_FIRST_TIER_MINIMUM_BALANCE: Uint128 = Uint128::new(1_000_000_000_000); // 1000

pub const DEFAULT_DISCOUNT_TOKEN_FIRST_TIER_DISCOUNT_NUMERATOR: Uint128 = Uint128::new(20);
pub const DEFAULT_DISCOUNT_TOKEN_FIRST_TIER_DISCOUNT_DENOMINATOR: Uint128 = Uint128::new(100);

pub const DEFAULT_DISCOUNT_TOKEN_SECOND_TIER_MINIMUM_BALANCE: Uint128 = Uint128::new(100_000_000_000);

pub const DEFAULT_DISCOUNT_TOKEN_SECOND_TIER_DISCOUNT_NUMERATOR: Uint128 = Uint128::new(15);
pub const DEFAULT_DISCOUNT_TOKEN_SECOND_TIER_DISCOUNT_DENOMINATOR: Uint128 = Uint128::new(100);

pub const DEFAULT_DISCOUNT_TOKEN_THIRD_TIER_MINIMUM_BALANCE: Uint128 = Uint128::new(10_000_000_000);

pub const DEFAULT_DISCOUNT_TOKEN_THIRD_TIER_DISCOUNT_NUMERATOR: Uint128 = Uint128::new(10);
pub const DEFAULT_DISCOUNT_TOKEN_THIRD_TIER_DISCOUNT_DENOMINATOR: Uint128 = Uint128::new(100);

pub const DEFAULT_DISCOUNT_TOKEN_FOURTH_TIER_MINIMUM_BALANCE: Uint128 = Uint128::new(1_000_000_000);

pub const DEFAULT_DISCOUNT_TOKEN_FOURTH_TIER_DISCOUNT_NUMERATOR: Uint128 = Uint128::new(5);
pub const DEFAULT_DISCOUNT_TOKEN_FOURTH_TIER_DISCOUNT_DENOMINATOR: Uint128 = Uint128::new(100);

pub const DEFAULT_REFERRER_REWARD_NUMERATOR: Uint128 = Uint128::new(5);
pub const DEFAULT_REFERRER_REWARD_DENOMINATOR: Uint128 = Uint128::new(100);

pub const DEFAULT_REFEREE_DISCOUNT_NUMERATOR: Uint128 = Uint128::new(5);
pub const DEFAULT_REFEREE_DISCOUNT_DENOMINATOR: Uint128 = Uint128::new(100);

// CONSTRAINTS
pub const MAX_LIQUIDATION_SLIPPAGE: Uint128 = Uint128::new(100); // expo = -2
pub const MAX_LIQUIDATION_SLIPPAGE_U128: Uint128 = Uint128::new(100); // expo = -2
pub const MAX_MARK_TWAP_DIVERGENCE: Uint128 = Uint128::new(5_000); // expo = -3
pub const MAXIMUM_MARGIN_RATIO: Uint128 = MARGIN_PRECISION;
pub const MINIMUM_MARGIN_RATIO: Uint128 =  Uint128::new(200);// MARGIN_PRECISION / Uint128::new(50);

// iterator limits
pub const MAX_LIMIT: u32 = 20;
pub const DEFAULT_LIMIT: u32 = 10;